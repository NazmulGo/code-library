{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"1": {
		"prefix": "topG2",
		"body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "typedef long long ll;",
            "typedef long double ld;",
            "",
            "#define pb push_back",
            "#define MOD 1000000007",
            "#define vll vector<ll>",
            "#define pll pair<ll, ll>",
            "#define endl \"\\n\" ",
            "#define all(v) v.begin(), v.end()",
            "#define mem(a,b) memset(a, b, sizeof(a))",
            "#define co(n) cout << n << endl",
            "#define yes cout << \"YES\" << endl",
            "#define no cout << \"NO\" << endl",
            "#define fraction(x) cout << fixed << setprecision(x)",
            "#define Baba_Yaga ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);",
            " ",
            "const double eps = 1e-9;",
            "const int N = 2e5+123;",
            "",			
            "ll gcd(ll a,ll b) { return __gcd(a,b); }",
            "ll lcm(ll a,ll b) { return (a*b)/__gcd(a,b); }",
            "",
            "int dx[] = {0, 0, 1, -1, 1, -1, -1, 1};",
            "int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};",
            "",
            "void solve()",
            "{",
            "",
            "}",
            "",
            "// --- Think the problem backwards ---",
            "",
            "int main()",
            "{",
            "    Baba_Yaga;",
            "    ll tc = 1; cin >> tc;",
            "    while(tc--) solve();",
            "}"
		],
		"description": ""
	},


	"2": {
      "prefix": "topG",
      "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "typedef long long ll;",
      "#define vll vector<ll>",
      "#define pll pair<ll, ll>",
      "#define endl \"\\n\" ",
      "#define all(v) v.begin(), v.end()",
      "const int N = 2e5+123;",
      "",
      "void solve() {",
      "    ",
      "}",
      "",
      "// --- Try to formulate equations. ---",
      "",
      "int main() {",
      "    ios_base::sync_with_stdio(0); cin.tie(0); ",
      "    cout.tie(0);",
      "",
      "    ll tc = 1; cin >> tc;",
      "    while(tc--) {",
      "        solve();",
      "    }",
      "}",
      ""
      ],
      "description": ""
      },


	"3": {
		"prefix": "zz debugg",
		"body": [
      "",
      "// debuggggggggggggggg hereeeeeeeeeeee : ",
      "template < typename F, typename S >",
      "ostream& operator << ( ostream& os, const pair< F, S > & p ) {",
      "    return os << \"(\" << p.first << \", \" << p.second << \")\";",
      "}",
      "",
      "template < typename T >",
      "ostream &operator << ( ostream & os, const vector< T > &v ) {",
      "    os << \"{\";",
      "    for(auto it = v.begin(); it != v.end(); ++it) {",
      "        if( it != v.begin() ) os << \", \";",
      "        os << *it;",
      "    }",
      "    return os << \"}\";",
      "}",
      "",
      "template < typename T >",
      "ostream &operator << ( ostream & os, const set< T > &v ) {",
      "    os << \"[\";",
      "    for(auto it = v.begin(); it != v.end(); ++it) {",
      "        if( it != v.begin() ) os << \", \";",
      "        os << *it;",
      "    }",
      "    return os << \"]\";",
      "}",
      "",
      "template < typename T >",
      "ostream &operator << ( ostream & os, const multiset< T > &v ) {",
      "    os << \"[\";",
      "    for(auto it = v.begin(); it != v.end(); ++it) {",
      "        if( it != v.begin() ) os << \", \";",
      "        os << *it;",
      "    }",
      "    return os << \"]\";",
      "}",
      "",
      "template < typename F, typename S >",
      "ostream &operator << ( ostream & os, const map< F, S > &v ) {",
      "    os << \"[\";",
      "    for(auto it = v.begin(); it != v.end(); ++it) {",
      "        if( it != v.begin() ) os << \", \";",
      "        os << it -> first << \" = \" << it -> second;",
      "    }",
      "    return os << \"]\";",
      "}",
      "",
      "#define dbg(args...) do {cerr << #args << \" : \"; faltu(args); } while(0)",
      "",
      "void faltu () {",
      "    cerr << endl;",
      "}",
      "",
      "template <typename T>",
      "void faltu( T a[], int n ) {",
      "    for(int i = 0; i < n; ++i) cerr << a[i] << ' ';",
      "    cerr << endl;",
      "}",
      "",
      "template <typename T, typename ... hello>",
      "void faltu( T arg, const hello &... rest) {",
      "    cerr << arg << ' ';",
      "    faltu(rest...);",
      "}",
	  "//Debugggggg endddddd <>",
	  ""
		],
		"description": ""
	},


	"4": {
		"prefix": "zz NT HermonicSeries",
		"body": [
            "vector<ll> cnt(N+1);",
            "",
            "void Hermonic() {",
            "    for(int i=1; i<=N; i++) {",
            "        for(int j=i; j<=N; j+=i) {",
            "            cnt[j]++;",
            "        }",
            "    }",
            "}"
		],
		"description": ""
	},


	"5": {
		"prefix": "zz NT Sieve",
		"body": [
            "vector<bool> isPrime(N+1, true);",
            "vector<ll> primes;",
            "",
            "void sieve() {",
            "    isPrime[0] = isPrime[1] = false;",
            "    for(ll i=0; i*i<N; i++) {",
            "        if(isPrime[i]) {",
            "            for(int j = i+i; j<N; j += i) {",
            "                isPrime[j] = false;",
            "            }",
            "        }",
            "    }",
            "    for(int i=2; i<=N; i++) {",
            "       if(isPrime[i]) primes.push_back(i);",
            "    }",
            "}"

		],
		"description": ""
	},


	"6": {
		"prefix": "zz NT PrimeFact",
		"body": [
            "vll primeFactors(ll n) {",
            "   vector<ll> fact;",
            "   for(int i=0; i<primes.size(); i++) {",
            "       if(1LL * primes[i] * primes[i] > n) break;",
            "       if(n % primes[i] == 0) {",
            "            while(n % primes[i] == 0) {",
            "                n /= primes[i];",
            "                fact.push_back(primes[i]);",
            "            }",
            "       }",
            "   }",
            "   if(n > 1) fact.push_back(n);",
            "   return fact;",
            "}"

		],
		"description": ""
	},


      "7": {
		"prefix": "zz Ordered set",
		"body": [
            "//// PBDS (Policy Based Data Structure - Ordered Set)",
            "#include<ext/pb_ds/assoc_container.hpp>",
            "#include<ext/pb_ds/tree_policy.hpp>",
            "using namespace __gnu_pbds;",
            "template<class T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
            "//oset <ll> s;  --> Declare ordered set",
            "//s.order_of_key(val)  --> val ta kun index e ache",
            "//*(s.find_by_order(i)) --> ith index e value"
		],
		"description": ""
	},


      "8": {
		"prefix": "zz NT Binary Expo",
		"body": [
            "ll big_mod(ll a, ll b, ll mod) {",
            "   ll ans = 1;",
            "   while(b) {",
            "   if(b & 1) ans = (ans * a) % mod;",
            "      a = (a * a) % mod;",
            "      b >>= 1;",
            "   }",
            "   return ans;",
            "}"
                  
		],
		"description": ""
	},


      "9": {
		"prefix": "zz NT gcdlcm",
		"body": [
                  "ll gcd(ll a,ll b) { return __gcd(a,b); }",
                  "ll lcm(ll a,ll b) { return (a*b)/__gcd(a,b); }",
                  "",
		],
		"description": ""
	},


      "10": {
		"prefix": "zz Snip_4_Direction_Array",
		"body": [
                  "int dx[] = {0, 0, 1, -1, 1, -1, -1, 1};",
                  "int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};",
                  ""
		],
		"description": ""
	},


      "11": {
      "prefix": "zz NT SumOfDivisors",
      "body": [
      "ll SumOfDivisors(ll n) {",
      "    ll ans = 1;",
      "    for(int i=0; i<primes.size(); i++) {",
      "        if(1LL * primes[i] * primes[i] > n) break;",
      "        if(n % primes[i] == 0) {",
      "            ll pwr = 1, sum = 1;",
      "            while(n % primes[i] == 0) {",
      "                n /= primes[i];",
      "                pwr *= primes[i];",
      "                sum += pwr;",
      "            }",
      "            ans *= sum;",
      "        }",
      "    }",
      "    if(n > 1) ans *= (n+1);",
      "    return ans;",
      "",
      "}",
      ""
      ],
      "description": ""
      },


      "12": {
      "prefix": "zz NT SNOD (1-N all div count sum)",
      "body": [
      "ll SNOD(ll n) {",
      "    ll score = 0;",
      "    for(ll i=1; i*i <= n; i++) {",
      "        ll contri_i = (n/i)-i;",
      "        score += contri_i;",
      "    }",
      "    score * 2;",
      "    score += sqrtl(n);",
      "    return score;",
      "}",
      ""
      ],
      "description": ""
      },


      "13": {
      "prefix": "zz NT NOD",
      "body": [
      "ll NOD(ll n) {",
      "    ll ans = 1;",
      "    for(int i=0; i<primes.size(); i++) {",
      "        if(1LL * primes[i] * primes[i] > n) break;",
      "        if(n % primes[i] == 0) {",
      "            ll ct = 0;",
      "            while(n % primes[i] == 0) {",
      "                n /= primes[i];",
      "                ct++;",
      "            }",
      "            ans *= (ct+1);",
      "        }",
      "    }",
      "    if(n > 1) ans *= 2;",
      "    return ans;",
      "}",
      ""
      ],
      "description": ""
      },


      "14": {
      "prefix": "zz Graph DFS",
      "body": [
      "ll n, m;",
      "bool vis[N];",
      "vector<ll> g[N];",
      "",
      "void dfs(ll u) {",
      "    vis[u] = true;",
      "    for(auto v : g[u]) {",
      "        if(!vis[v]) {",
      "            dfs(v);",
      "        }",
      "    }",
      "}",
      ""
      ],
      "description": ""
      },


      "15": {
      "prefix": "zz Graph BFS",
      "body": [
      "vector<ll> g[N];",
      "bool vis[N];",
      "vector<ll> lvl(N); ",
      "",
      "void bfs(int s) {",
      "    queue<int> q;",
      "    q.push(s);",
      "    vis[s] = true;",
      "    lvl[s] = 0;",
      "",
      "    while (!q.empty()) {",
      "        int u = q.front();",
      "        q.pop();",
      "",
      "        for (int v : g[u]) {",
      "            if (!vis[v]) {",
      "                vis[v] = true;",
      "                lvl[v] = lvl[u] + 1;",
      "                q.push(v);",
      "            }",
      "        }",
      "    }",
      "}"
      ],
      "description": ""
      },


      "16": {
      "prefix": "zz Graph Cycle detect DFS",
      "body": [
      "// \"If from a node, I can go to an already visited node that is not its parent, then a cycle exists.\"",
      "bool hasCycle = false;",
      "void dfs(int u, int parent) {",
      "    vis[u] = true;",
      "    for (int v : g[u]) {",
      "        if (!vis[v]) {",
      "            dfs(v, u);",
      "        } ",
      "        else if (v != parent) {",
      "            hasCycle = true;",
      "        }",
      "    }",
      "}",
      ""
      ],
      "description": ""
      },

      
      "17": {
      "prefix": "zz snip4_gnu_pds_library",
      "body": [
      "#include<ext/pb_ds/assoc_container.hpp>",
      "#include<ext/pb_ds/tree_policy.hpp>",
      "using namespace __gnu_pbds;",
      ""
      ],
      "description": ""
      },


      "18": {
      "prefix": "zz snip4_custom_hash",
      "body": [
      "#include<ext/pb_ds/assoc_container.hpp>",
      "#include<ext/pb_ds/tree_policy.hpp>",
      "using namespace __gnu_pbds;",
      "",
      "struct chash {",
      "    const int random=(long long int)(make_unique<char>().get())",
      "        ^ chrono::high_resolution_clock::now().time_since_epoch().count();",
      "    static unsigned long long splitmix64(unsigned long long x) {",
      "        x += 0x9e3779b97f4a7c15;",
      "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
      "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
      "        return x ^ (x >> 31);",
      "    }",
      "    int operator()(int x) const {",
      "        return splitmix64(x+random);",
      "    }",
      "    int operator()(pair<int,int> x) const {",
      "        unsigned num=(x.first^(x.second>>1));",
      "        return splitmix64(num+random);",
      "    }",
      "    //for vector as key I can also do the similarl thing for lower collision",
      "    long long operator()(string s) const {",
      "        const int p = 31;  ",
      "        //for only lowercase p=31,for lowercase+uppercase p=53",
      "        const int m = 1e9 + 9;",
      "        long long hash_value = 0;",
      "        long long p_pow = 1;",
      "",
      "        for (char c : s) {",
      "            hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;",
      "            p_pow = (p_pow * p) % m;",
      "        }",
      "        return hash_value;",
      "    }",
      "};",
      "//for int as key: unordered_map<int,int,chash>mp; / gp_hash_table<int,int,chash>mp;",
      "",
      "//for pair<int,int> as key: unordered_map<pair<int,int>,int,chash>mp; / gp_hash_table<pair<int,int>,int,chash>mp;",
      "",
      "//for string as key: unordered_map<string,int,chash>mp; / gp_hash_table<string,int,chash>mp;"
      ],
      "description": ""
      },
      

    "19": {
      "prefix": "zz Graph Dijkstra",
      "body": [
      "ll n, m;",
      "vector<pll> g[N];",
      "vll cost(N);",
      "",
      "void dijkstra(ll src, ll w) {",
      "    for(int i=1; i<=n; i++) cost[i] = 1e18;",
      "    cost[src] = 0;",
      "   ",
      "    priority_queue<pll, vector<pll>, greater<pll>> pq;",
      "    pq.push({0, src});",
      "   ",
      "    while(!pq.empty()) {",
      "        auto[curCost, u] = pq.top();",
      "        pq.pop();",
      "",
      "        if(curCost > cost[u]) continue;",
      "",
      "        for(auto [v, weight] : g[u]) {",
      "            if(weight + curCost < cost[v]) {",
      "                cost[v] = weight + curCost;",
      "                pq.push({cost[v], v});",
      "            }",
      "        }",
      "    }",
      "}"
      ],
      "description": ""
      },

      "20": {
      "prefix": "zz NT xor_calc",
      "body": [
      "int computeXOR(int n) {",
      "  if (n % 4 == 0) return n;",
      "  if (n % 4 == 1) return 1;",
      "  if (n % 4 == 2) return n + 1;",
      "  return 0;",
      "}",
      ""
      ],
      "description": ""
      },


      "21": {
      "prefix": "zz NT isPowerOfTwo",
      "body": [
      "bool isPowerOfTwo(int n) {",
      "    if (n <= 0) return false;",
      "    return (n & (n - 1)) == 0;",
      "}",
      ""
      ],
      "description": ""
      },


      "22": {
      "prefix": "zz NT bitwise_stuffs",
      "body": [
      "#define ONBIT(x, k) ((x) | (1ll << k))",
      "#define OFFBIT(x, k) ((x) & (~ (1ll << k)))",
      "#define ONOROFF(x, k) ((x) & (1ll << k))",
      "#define FLIPBIT(x, k) ((x) ^ (1ll << k))",
      " ",
      "int pop_count(int x) { return __builtin_popcount(x); }",
      "int pop_countll(ll x) { return __builtin_popcountll(x); }",

      "int MSB_index(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }",
      "int MSB_indexll(ll x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }",

      "int LSB_index(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); }",
      "int LSB_indexll(ll x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }",
      "",
      ],
      "description": ""
      },

    "23": {
      "prefix": "YES__NO",
      "body": [
      "#define yes cout << \"YES\" << endl",
      "#define no cout << \"NO\" << endl"
      ],
      "description": ""
    },

    "24": {
      "prefix": "zz Graph DSU",
      "body": [
      "vll par(N), sz(N);",
      "",
      "ll find_par( ll u ) {",
      "    if(par[u] == u) return u;",
      "    return par[u] = find_par(par[u]);",
      "}",
      "",
      "void Union(ll u, ll v) {",
      "    if(sz[u] < sz[v]) swap(u, v);",
      "    par[v] = u;",
      "    sz[u] += sz[v];",
      "}",
      "for(int i=0; i<=n; i++) par[i] = i, sz[i] = 1;",
      ""
      ],
      "description": ""
      },

      "25": {
      "prefix": "zz Geometry point_Location",
      "body": [
      "ll point_location(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {",
      "    ll cross = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1);",
      "    if (cross == 0) return 0;  // TOUCH / ON THE LINE",
      "    else if (cross > 0) return 1;  // LEFT",
      "    else return -1;  // RIGHT",
      "}",
      "",
      "bool isInside(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {",
      "    ",
      "    ll chk = point_location(x1, y1, x2, y2, x3, y3);  // chk == 0, same Line",
      "    if(chk == 0) {",
      "        return(x3 >= min(x1, x2) && x3 <= max(x1, x2) && y3 >= min(y1, y2) && y3 <= max(y1, y2));",
      "    }",
      "    return false;",
      "}"
      ],
      "description": ""
      },

      "26": {
      "prefix": "zz Geometry Convex_Hull",
      "body": [
      "vector<pair<ll, ll>> convex_hull(vector<pair<ll, ll>>p) {",
      "  ll m, k=1, n=p.size(); if(n<=1) return p;",
      "  sort(p.begin(), p.end()); ",
      "  vector<pair<ll, ll>>hull; k=hull.size();",
      "",
      "  for(ll i=0; i<n; i++) {",
      "    m = hull.size();",
      "    while( m >= k+2 && point_location(hull[m-2].first, hull[m-2].second, hull[m-1].first, hull[m-1].second, p[i].first, p[i].second) > 0) {  // >=0 dile same point thakle mibe na",
      "      hull.pop_back();                            // mane hoilo p1 and p2 doita same line e ",
      "      m = hull.size();                              // thakle ekta nibe",
      "    }",
      "    hull.push_back(p[i]);",
      "  }",
      "",
      "  hull.pop_back(); ",
      "  k=hull.size();",
      "",
      "  for(ll i=n-1; i>=0; i--) {",
      "    m = hull.size();",
      "    while(m >= k+2 && point_location(hull[m-2].first, hull[m-2].second, hull[m-1].first, hull[m-1].second, p[i].first, p[i].second)>0) {",
      "      hull.pop_back();",
      "      m = hull.size();",
      "    }",
      "    hull.push_back(p[i]);",
      "  }",
      "",
      "  hull.pop_back();",
      "  return hull;",
      "}"
      ],
      "description": ""
      },

      "27": {
      "prefix": "zz NT Bin-Dec Convertion",
      "body": [
      "ll binaryToDecimal(string &s) {",
      "    ll ans = 0;",
      "    ll base = 1; ",
      "",
      "    for (ll i = s.length() - 1; i >= 0; i--) {",
      "        if (s[i] == '1') {",
      "            ans += base;",
      "        }",
      "        base *= 2;",
      "    }",
      "    return ans;",
      "}",
      "",
      "string decimalToBinary(ll n) {",
      "    bitset<10> b(n);",
      "    string s = b.to_string();",
      "    return s;",
      "}",
      "",
      ""
      ],
      "description": ""
      },

      "28": {
      "prefix": "zz NT print_binary",
      "body": [
      "void print_binary(ll n) {",
      "    for(int i=31; i>=0; i--) {",
      "        cout << ((n >> i) & 1);",
      "    }",
      "    cout << endl;",
      "}"
      ],
      "description": ""
      },

     "29": {
      "prefix": "zz 2D prefix Sum",
      "body": [
      "void solve() {",
      "    int n, m; cin >> n >> m;",
      "    vector<vll> arr(n+1, vll (m+1));",
      "    vector<vll> pref(n+1, vll (m+1));",
      "    for (int i = 1; i <= n; i++) {",
      "        for (int j = 1; j <= m; j++) {",
      "            cin >> arr[i][j];",
      "        }",
      "    }",
      "    for (int i = 1; i <= n; i++) {",
      "        for (int j = 1; j <= m; j++) {",
      "            pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + arr[i][j];",
      "        }",
      "    }",
      "    int q; cin >> q;",
      "    while (q--) {",
      "        int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;",
      "        int ans = 0;",
      "        ans = pref[x2][y2] - pref[x1 - 1][y2] - pref[x2][y1 - 1] + pref[x1 - 1][y1 - 1];",
      "        cout << ans << endl;",
      "    }",
      "}",
      ""
      ],
      "description": ""
      },

      "30": {
      "prefix": "zz Geometry Polygon Area",
      "body": [
      "ll polygon_area(vector<pll> &vp) {",
      "    ll sum_1 = 0, sum_2 = 0, n = vp.size(), area = 0;",
      "    for(int i=0; i<n-1; i++) {",
      "        sum_1 += (vp[i].first * vp[i+1].second);",
      "        sum_2 += (vp[i].second * vp[i+1].first);",
      "    }",
      "",
      "    area =  sum_1 - sum_2; // div by 2 is actial rule but here asked for 2*area;",
      "    return abs(area);",
      "}",
      ""
      ],
      "description": ""
      },

      "31": {
      "prefix": "zz String Hashing",
      "body": [
      "//primes = {285897553, 745494041, 693888673, 950758511, 282174533, 847345579, 722520917, 354688703, 963459817, 139793893};",
      "const int N = 1e6+12;",
      "const int b1 = 137, b2 = 277;",
      "const int M1 = 1e9+7, M2 = 139793893;",
      "pair<int, int> pw[N], ipw[N], pref[N];",
      "",
      "ll big_mod(ll a, ll b, ll mod) {",
      "   ll ans = 1;",
      "   while(b) {",
      "   if(b & 1) ans = (ans * a) % mod;",
      "      a = (a * a) % mod;",
      "      b >>= 1;",
      "   }",
      "   return ans;",
      "}",
      "",
      "void prePower() {",
      "   pw[0] = {1, 1};",
      "   for(int i=1; i<N; i++) {",
      "      pw[i].first = (1LL * pw[i-1].first * b1) % M1;",
      "      pw[i].second = (1LL * pw[i-1].second * b2) % M2;",
      "   }",
      "",
      "   ll p1_inv = big_mod(b1, M1-2, M1);",
      "   ll p2_inv = big_mod(b2, M2-2, M2);",
      "   ",
      "   ipw[0] = {1, 1};",
      "   for(int i=1; i<N; i++) {",
      "      ipw[i].first = (1LL * ipw[i-1].first * p1_inv) % M1;",
      "      ipw[i].second = (1LL * ipw[i-1].second * p2_inv) % M2;",
      "   }",
      "}",
      "",
      "pair<int, int> hash_of(string s) {",
      "    int n = s.size();",
      "    pair<int, int> hs = {0, 0};",
      "    for(int i=0; i<n; i++) {",
      "        hs.first += (1LL * s[i] * pw[i].first) % M1;",
      "        hs.first %= M1;",
      "        hs.second += (1LL * s[i] * pw[i].second) % M2;",
      "        hs.second %= M2;",
      "    }",
      "    return hs;",
      "}",
      "",
      "void build(string s) {",
      "    int n = s.size();",
      "    for(int i=0; i<n; i++) {",
      "        pref[i].first = (1LL * s[i] * pw[i].first) % M1;",
      "        if(i) pref[i].first = (pref[i].first + pref[i-1].first) % M1;",
      "        pref[i].second = (1LL * s[i] * pw[i].second) % M2;",
      "        if(i) pref[i].second = (pref[i].second + pref[i-1].second) % M2;",
      "    }",
      "}",
      "",
      "pair<int, int> get_hash(int i, int j) {",
      "    pair<int, int> hs = {0, 0};",
      "    hs.first = pref[j].first;",
      "    if(i) hs.first = ( ((hs.first - pref[i-1].first) % M1) + M1) % M1;",
      "    hs.first = (1LL * hs.first * ipw[i].first) % M1;",
      "",
      "    hs.second = pref[j].second;",
      "    if(i) hs.second = ( ((hs.second - pref[i-1].second) % M2) + M2) % M2;",
      "    hs.second = (1LL * hs.second * ipw[i].second) % M2;",
      "    return hs;",
      "}",
      ],
      "description": ""
      },

      "32": {
      "prefix": "zz GP Hash Table",
      "body": [
      "#include<ext/pb_ds/assoc_container.hpp>",
      "#include<ext/pb_ds/tree_policy.hpp>",
      "using namespace __gnu_pbds;",
      "gp_hash_table<ll, ll> mp;"
      ],
      "description": ""
      },
     
      "33": {
      "prefix": "zz Graph DFS on Grid ",
      "body": [
      "ll n, m;",
      "bool vis[N][N];",
      "char arr[N][N];",
      "",
      "void dfs(ll x, ll y) {",
      "    vis[x][y] = true;",
      "    ",
      "    for(int z=0; z<4; z++) {",
      "        ll i = x + dx[z];",
      "        ll j = y + dy[z];",
      "",
      "        if(i >= 1 && i <= n && j >= 1 && j <= m && !vis[i][j] && arr[i][j] != '#') {",
      "            dfs(i, j);",
      "        }",
      "    }",
      "}"
      ],
      "description": ""
      },

      "34": {
      "prefix": "zz Graph DFS Bipartite",
      "body": [
      "ll n, m;",
      "vector<ll> g[N];",
      "vll ans(N);",
      "bool vis[N];",
      "bool yo = true;",
      "",
      "void dfs(ll u, ll color) {",
      "    vis[u] = true;",
      "    ans[u] = color;",
      "    for(auto v : g[u]) {",
      "        if(!vis[v]) {",
      "            dfs(v, color == 1 ? 2:1);",
      "        }",
      "        else if(ans[v] == ans[u]) yo = false; // IMPOSSIBLE",
      "    }",
      "}",
      ""
      ],
      "description": ""
      },

      "35": {
      "prefix": "zz Graph DFS Cycle",
      "body": [
      "ll n, m, st = -1, ed = -1;",
      "bool vis[N];",
      "vector<ll> g[N], parent(N);",
      "bool cycleFound = false;",
      "",
      "void dfs(ll u, ll par) {",
      "    vis[u] = true;",
      "    parent[u] = par;",
      "    for(auto v : g[u]) {",
      "        if(!vis[v]) {",
      "            dfs(v, u);",
      "        }",
      "        else if(vis[v] && v != par && !cycleFound) {",
      "            cycleFound = true;",
      "            st = u, ed = v;",
      "        }",
      "    }",
      "}"
      ],
      "description": ""
      },

      "36": {
      "prefix": "zz Graph BFS Bipartite",
      "body": [
      "ll n, m;",
      "vector<ll> g[N];",
      "vector<ll> color(N, -1); ",
      "",
      "bool yo = true;",
      "",
      "void bfs(int s) {",
      "    queue<int> q;",
      "    q.push(s);",
      "    color[s] = 1;",
      "",
      "    while (!q.empty()) {",
      "        int u = q.front();",
      "        q.pop();",
      "",
      "        for (int v : g[u]) {",
      "            if (color[v] == -1) {",
      "                color[v] = (color[u] == 1? 2:1);",
      "                q.push(v);",
      "            }",
      "            else if(color[v] == color[u]) yo = false;",
      "        }",
      "    }",
      "}"
      ],
      "description": ""
      },

      "37": {
      "prefix": "zz Graph BFS on Grid",
      "body": [
      "ll n, m;",
      "char arr[N][N];",
      "bool vis[N][N];",
      "pair<ll,ll>  par[N][N];",
      "",
      "void bfs(ll x, ll y){",
      "    par[x][y] = {-1, -1};",
      "    vis[x][y] = true;",
      "    queue<pll> q;",
      "    q.push({x, y});",
      "    while(!q.empty()) {",
      "        auto [i, j] = q.front();",
      "        q.pop();",
      "",
      "        for(int k=0; k<4; k++) {",
      "            ll ii = i + dx[k];",
      "            ll jj = j + dy[k];",
      "",
      "            if(ii >= 1 && ii <= n && jj >= 1 && jj <= m && !vis[ii][jj] && arr[ii][jj] != '#') {",
      "                vis[ii][jj] = true;",
      "                q.push({ii, jj});",
      "                par[ii][jj] = {i, j};",
      "            }",
      "        }",
      "    }",
      "}"
      ],
      "description": ""
      },

      "38": {
      "prefix": "zz Graph Path Backtrack",
      "body": [
      "  string s;",
      "  while(par[x][y].first != -1) {",
      "     auto [x1, y1] = par[x][y];",
      "     if(x+1 == x1) s.push_back('U');",
      "     else if(x-1 == x1) s.push_back('D');",
      "     else if(y+1 == y1) s.push_back('L');",
      "     else if(y-1 == y1) s.push_back('R');",
      "     x = x1, y = y1;",
      "  }",
      "    reverse(all(s));"
      ],
      "description": ""
      },

      "39": {
      "prefix": "zz graph BFS Grid Multiple Source",
      "body": [
      "ll n, m;",
      "char arr[N][N];",
      "bool vis_mon[N][N], vis_me[N][N];",
      "pair<ll,ll>  par_me[N][N];",
      "pair<ll, ll> me;",
      "ll lvl_mon[N][N], lvl_me[N][N];",
      "vector<pll> monsters;",
      "",
      "void bfs_monsters() {",
      "    queue<pll> q;",
      "    for(auto [a, b] : monsters) {",
      "        q.push({a, b});",
      "        lvl_mon[a][b] = 0;",
      "        vis_mon[a][b] = true;",
      "    }",
      "    while(!q.empty()) {",
      "        auto [i, j] = q.front();",
      "        q.pop();",
      "",
      "        for(int k=0; k<4; k++) {",
      "            ll ii = i + dx[k];",
      "            ll jj = j + dy[k];",
      "",
      "            if(ii >= 1 && ii <= n && jj >= 1 && jj <= m && !vis_mon[ii][jj] && arr[ii][jj] != '#' && arr[ii][jj] != 'M') {",
      "                vis_mon[ii][jj] = true;",
      "                q.push({ii, jj});",
      "                lvl_mon[ii][jj] = 1 + lvl_mon[i][j];",
      "            }",
      "        }",
      "    }",
      "}",
      "",
      "void bfs_me(ll x, ll y){",
      "    par_me[x][y] = {-1, -1};",
      "    vis_me[x][y] = true;",
      "    lvl_me[x][y] = 0;",
      "    queue<pll> q;",
      "    q.push({x, y});",
      "    while(!q.empty()) {",
      "        auto [i, j] = q.front();",
      "        q.pop();",
      "",
      "        for(int k=0; k<4; k++) {",
      "            ll ii = i + dx[k];",
      "            ll jj = j + dy[k];",
      "",
      "            if(ii >= 1 && ii <= n && jj >= 1 && jj <= m && !vis_me[ii][jj] && arr[ii][jj] != '#' && arr[ii][jj] != 'M') {",
      "                vis_me[ii][jj] = true;",
      "                q.push({ii, jj});",
      "                par_me[ii][jj] = {i, j};",
      "                lvl_me[ii][jj] = 1 + lvl_me[i][j];",
      "            }",
      "        }",
      "    }",
      "}",
      ""
      ],
      "description": ""
      },

      "40": {
      "prefix": "zz Math Formula Nth_Term",
      "body": [
      "// an = a1 + (n - 1) * d ---> 1 3 5 7 9.... → a = 1, d = 2",
      "ll incre_Nth_term(ll a, ll d, ll n) {",
      "    return a + 1LL * (n - 1) * d;",
      "}",
      "",
      "// an = a1 - (n - 1) * d ---> 13 10 7 4... → a = 13, d = 3",
      "ll decre_Nth_term(ll a, ll d, ll n) {",
      "    return a - 1LL * (n - 1) * d;",
      "}",
      "",
      "// an = a * r^(n - 1) ---> 2 6 18 54 → a = 2, r = 3",
      "ll geometric_nth_term(ll a, ll r, ll n) {",
      "    return 1LL * a * big_mod(r, n - 1, 100000000); // mod-safe version",
      "}",
      ""
      ],
      "description": ""
      },

      "41": {
      "prefix": "zz Math Formula Sum_Of",
      "body": [
      "// 1 + 2 + ... + n ---> n(n+1)/2",
      "ll sum_n(ll n) {",
      "    return 1LL * n * (n + 1) / 2;",
      "}",
      "",
      "// 1 - 2 + 3 - 4 + 5 = 3",
      "ll alt_sign_sum_start_pos(ll n) {",
      "    return (n % 2 == 0) ? -n / 2 : (n + 1) / 2;",
      "}",
      "",
      "//  -1 + 2 - 3 + 4 - 5 = -3",
      "ll alt_sign_sum_start_neg(ll n) {",
      "    return (n % 2 == 0) ? n / 2 : -((n + 1) / 2);",
      "}",
      "",
      "// Sum of first n odd numbers: 1 + 3 + 5 + 7 ... --> n^2",
      "ll sum_n_odd(ll n) {",
      "    return 1LL * n * n;",
      "}",
      "",
      "// Sum of first n even numbers: 2 + 4 + 6 + ... ---> n(n+1)",
      "ll sum_n_even(ll n) {",
      "    return 1LL * n * (n + 1);",
      "}",
      "",
      "// Sum of squares: 1^2 + 2^2 + ... + n^2 --->  n(n+1)(2n+1)/6",
      "ll sum_n_squares(ll n) {",
      "    return 1LL * n * (n + 1) * (2 * n + 1) / 6;",
      "}",
      "",
      "// Sum of cubes: 1^3 + 2^3 + ... + n^3 ---> (n(n+1)/2)^2",
      "ll sum_n_cubes(ll n) {",
      "    ll s = 1LL * n * (n + 1) / 2;",
      "    return s * s;",
      "}"
      ],
      "description": ""
      },

      "42": {
      "prefix": "fori",
      "body": [
      "for(int i=0; i<n; i++) {",
      "",
      "}",
      ],
      "description": ""
      },

      "43": {
      "prefix": "forj",
      "body": [
      "for(int j=0; j<n; j++) {",
      "",
      "}",
      ],
      "description": ""
      }

     
}
